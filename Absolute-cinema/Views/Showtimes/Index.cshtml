@using Common.Constants
@using Common.ViewModels.ShowtimeVMs
@model ViewAllShowtimeVM
@{
    ViewData["Title"] = "Showtime Management";
    Layout = "Admin/_AdminLayout";
    int startIndex = (Model.PageNumber - 1) * PageConstants.PageSize + 1;
    if (startIndex <= 0) startIndex = 1;

}

<div class="min-h-screen bg-gray-900 text-gray-100">
    <div class="container mx-auto px-6 py-8">
        <!-- Header Section -->
        <div class="mb-8">
            <h1 class="mb-2 text-3xl font-bold text-white">Showtime Management</h1>
            <p class="text-gray-400">Manage movie showtimes, schedules, and pricing</p>
        </div>

        <!-- Action Bar -->
        <div class="mb-6 flex items-center justify-between">
            <div class="flex items-center space-x-4">
                <a asp-action="Create"
                   class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 font-medium text-white shadow-lg transition-colors duration-200 hover:bg-blue-700 hover:shadow-xl">
                    <svg class="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Create New Showtime
                </a>
            </div>
            <div class="text-sm text-gray-400">
                Total: @Model.Showtimes.Count() showtimes
            </div>
        </div>

        @* Search section *@
        <form asp-action="Index" method="get" class="mb-6 flex items-center space-x-4" id="searchForm">
            @* Search Type Dropdown *@
            <select name="SearchType" class="rounded-lg bg-gray-700 px-3 py-2 text-gray-200 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                <option value="all" selected="@(Model.SearchType == "all")">All</option>
                <option value="roomName" selected="@(Model.SearchType == "roomName")">Room</option>
                <option value="movieName" selected="@(Model.SearchType == "movieName")">Movie</option>
            </select>

            @* Query Input *@
            <input type="text" name="Query" value="@Model.Query" placeholder="Enter your search..."
                   class="placeholder-gray-400 rounded-lg bg-gray-700 px-3 py-2 text-gray-200 focus:ring-2 focus:ring-blue-500 focus:outline-none" />

            @* PageNumber *@
            <input type="hidden" name="PageNumber" value="@Model.PageNumber" />

            @* Date Range *@
            <div class="flex items-center space-x-2">
                <label for="FromDate" class="text-sm text-gray-300">From</label>
                <input type="datetime-local" name="FromDate" value="@(Model.FromDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")"
                       class="placeholder-gray-400 rounded-lg bg-gray-700 px-3 py-2 text-gray-200 focus:ring-2 focus:ring-blue-500 focus:outline-none" />
                <label for="ToDate" class="text-sm text-gray-300">To</label>
                <input type="datetime-local" name="ToDate" value="@(Model.ToDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")"
                       class="placeholder-gray-400 rounded-lg bg-gray-700 px-3 py-2 text-gray-200 focus:ring-2 focus:ring-blue-500 focus:outline-none" />
            </div>

            @* Order By *@
            <div class="flex items-center space-x-2">
                <label for="OrderByDesc" class="text-sm text-gray-300">Sort Descending</label>
                <input type="checkbox" @(Model.OrderByDesc ? "checked" : "")
                       class="form-checkbox h-5 w-5 rounded border-gray-500 bg-gray-700 text-blue-600 transition duration-200 focus:ring-blue-500"
                       id="checkboxPlaceholder" />
                <input type="hidden" name="OrderByDesc" value="@Model.OrderByDesc" />
            </div>

            <button type="submit"
                    class="cursor-pointer rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors duration-200 hover:bg-blue-700">
                Search
            </button>
        </form>
        <!-- Table Container -->
        <div class="overflow-hidden rounded-xl border border-gray-700 bg-gray-800 shadow-2xl">
            <div class="overflow-hidden">
                <table class="w-full table-fixed">
                    <thead class="bg-gray-750 bg-opacity-50">
                        <tr class="border-b border-gray-700">
                            <th class="w-6 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                #
                            </th>
                            <th class="w-20 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                Start Time
                            </th>
                            <th class="w-20 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                End Time
                            </th>
                            <th class="w-16 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                Base Price
                            </th>
                            <th class="w-8 px-3 py-4 text-center text-sm font-medium text-gray-300">
                                Status
                            </th>
                            <th class="w-16 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                Room
                            </th>
                            <th class="w-16 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                Movie
                            </th>
                            <th class="w-24 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                Created Date
                            </th>
                            <th class="w-16 px-3 py-4 text-center text-sm font-medium text-gray-300">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-700">
                        @foreach (var item in Model.Showtimes)
                        {
                            <tr class="transition-colors duration-200 hover:bg-gray-750 hover:bg-opacity-50">
                                <th class="w-6 px-3 py-4 text-left text-sm font-medium text-gray-300">
                                    @startIndex
                                </th>
                                <td class="px-3 py-4 text-sm font-medium text-white">
                                    @Html.DisplayFor(modelItem => item.StartTime)
                                </td>
                                <td class="px-3 py-4 text-sm text-gray-300">
                                    @Html.DisplayFor(modelItem => item.EndTime)
                                </td>
                                <td class="px-3 py-4 text-sm font-semibold text-green-400">
                                    @item.BasePriceFormatted
                                </td>
                                @{
                                    // If current time is matching with the showtime, display it
                                    var isThisShowtimeInProgress = item.StartTime <= DateTime.Now && DateTime.Now <= item.EndTime ?
                                    true : false;

                                    var statusSymbol = "";
                                    var statusColor = "";
                                    var statusTitle = "";
                                    if (isThisShowtimeInProgress)
                                    {
                                        statusSymbol = "●";
                                        statusColor = "text-yellow-400";
                                        statusTitle = "On going";
                                    }
                                    else if (item.Status)
                                    {
                                        statusSymbol = "●";
                                        statusColor = "text-green-400";
                                        statusTitle = "Active";
                                    }
                                    else if (!item.Status)
                                    {
                                        statusSymbol = "●";
                                        statusColor = "text-gray-400";
                                        statusTitle = "Finished";
                                    }
                                }
                                <td class="px-3 py-4 text-center" title="@statusTitle">
                                    <span class="@statusColor text-lg" title="@statusTitle">@statusSymbol</span>
                                </td>
                                <td class="px-3 py-4 text-sm text-gray-300">
                                    @Html.DisplayFor(modelItem => item.Room.Name)
                                </td>
                                <td class="px-3 py-4 text-sm text-gray-300">
                                    @Html.DisplayFor(modelItem => item.Movie.Title)
                                </td>
                                <td class="px-3 py-4 text-sm text-gray-400">
                                    @Html.DisplayFor(modelItem => item.CreatedAt)
                                </td>
                                <td class="px-3 py-4 text-center">
                                    <div class="flex justify-center space-x-3">
                                        <a asp-action="Edit" asp-route-id="@item.Id" data-showtime-id="@item.Id"
                                           class="modifyLink bg-opacity-20 inline-flex items-center rounded bg-yellow-900 px-3 py-2 text-xs font-medium text-yellow-400 transition-opacity duration-200 hover:bg-opacity-30 hover:opacity-75"
                                           title="Edit">
                                            <i class="fas fa-edit text-lg"></i>
                                        </a>
                                        <a asp-action="Details" asp-route-id="@item.Id"
                                           class="bg-opacity-20 inline-flex items-center rounded bg-blue-900 px-3 py-2 text-xs font-medium text-blue-400 transition-opacity duration-200 hover:bg-opacity-30 hover:opacity-75"
                                           title="View Details">
                                            <i class="fas fa-eye text-lg"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" data-showtime-id="@item.Id"
                                           class="modifyLink bg-opacity-20 inline-flex items-center rounded bg-red-900 px-3 py-2 text-xs font-medium text-red-400 transition-opacity duration-200 hover:bg-opacity-30 hover:opacity-75"
                                           title="Delete">
                                            <i class="fas fa-trash text-lg"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                            startIndex += 1;
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @* Pagination *@
        @if (Model.TotalPage > 1)
        {
            <div class="mt-6 flex justify-center space-x-2">
                @for (int i = 1; i <= Model.TotalPage; i++)
                {
                    <a asp-action="Index" asp-route-SearchType="@Model.SearchType" asp-route-Query="@Model.Query" asp-route-PageNumber="@i"
                       asp-route-OrderByDesc="@Model.OrderByDesc" data-page-data="@i"
                       class="paginationItem rounded-lg px-3 py-1 @(i == Model.PageNumber ? "bg-blue-600 text-white" : "bg-gray-700 text-gray-300 hover:bg-gray-600")">
                        @i
                    </a>
                }
            </div>
        }



        <!-- Empty State (if no data) -->
        @if (!Model.Showtimes.Any())
        {
            <div class="py-12 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h4a1 1 0 110 2h-1l-.867 12.142A2 2 0 0118.138 21H5.862a2 2 0 01-1.995-1.858L3 5H2a1 1 0 110-2h4zM7 8a1 1 0 012 0v8a1 1 0 11-2 0V8zM13 8a1 1 0 112 0v8a1 1 0 11-2 0V8z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-300">No showtimes found</h3>
                <p class="mt-1 text-sm text-gray-500">Get started by creating a new showtime.</p>
                <div class="mt-6">
                    <a asp-action="Create"
                       class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 font-medium text-white transition-colors duration-200 hover:bg-blue-700">
                        <svg class="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Create New Showtime
                    </a>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Add event listener for all of the pagination links
            let paginationLinks = document.querySelectorAll('.paginationItem');
            // Submit the form when the OrderByDesc checkbox changes
            let orderBy = document.querySelector('#checkboxPlaceholder');
            let realOrderBy = document.querySelector('input[name="OrderByDesc"]');
            let searchForm = document.getElementById('searchForm');

            paginationLinks.forEach(function (link) {
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    let PageNumber = this.getAttribute('data-page-data');
                    let form = document.getElementById('searchForm');
                    form.querySelector('input[name="PageNumber"]').value = PageNumber;
                    realOrderBy.value = orderBy.checked ? "true" : "false";
                    form.submit()
                });
            });

            orderBy.addEventListener('change', function () {
                realOrderBy.value = orderBy.checked ? "true" : "false";
                searchForm.submit();
            });
        });

        let editableLinks = document.getElementsByClassName('modifyLink');

        Array.from(editableLinks).forEach(function (link) {
            link.addEventListener('click', function (event) {
                event.preventDefault();
                let showtimeId = this.getAttribute('data-showtime-id');
                let action = this.getAttribute('href');

                isThisShowtimeAvailable(showtimeId)
                    .then(result => {
                        if (result.status) {
                            // Click the link for user
                            window.location.href = action;
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Showtime Unavailable',
                                text: result.message,
                                confirmButtonText: 'OK',
                                customClass: {
                                    confirmButton: 'bg-red-700 text-white rounded-lg shadow-lg hover:bg-red-800 px-4 py-2'
                                },
                                buttonsStyling: false
                            });
                        }
                    });
            });
        });

        async function isThisShowtimeAvailable(showtimeId) {
            try {
                const response = await fetch(`Showtimes/IsShowtimeAvailableToEdit/?showtimeId=${showtimeId}`);
                const data = await response.json();
                return { status: data.status, message: data.message };
            } catch (error) {
                console.error('There was a problem with the fetch operation:', error);
                return { status: false, message: 'Error occurred' };
            }
        }
    </script>
}