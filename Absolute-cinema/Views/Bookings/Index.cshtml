@model IEnumerable<Common.ViewModels.BookingVMs.BookingViewModel>

@{
    ViewData["Title"] = "Bookings";
}


<div class="container mx-auto py-10">
    <div class="mx-auto max-w-5xl rounded-2xl bg-gray-800 p-8 shadow-2xl">
        <div class="mb-6 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
            <h1 class="text-3xl font-bold text-white">Lịch sử đặt vé</h1>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full overflow-hidden rounded-xl bg-gray-900 text-sm text-gray-200">
                <thead>
                    <tr class="bg-gray-700 text-gray-100">
                        <th class="px-4 py-3 text-left">Ngày đặt</th>
                        <th class="px-4 py-3 text-left">Số lượng vé</th>
                        <th class="px-4 py-3 text-left">Tổng tiền</th>
                        <th class="px-4 py-3 text-left">Người dùng</th>
                        <th class="px-4 py-3 text-left">Thời gian tạo</th>
                        <th class="px-4 py-3 text-center">Trạng thái</th>
                        <th class="px-4 py-3 text-center">Chi tiết</th>
                        <th class="px-4 py-3 text-center">Feedback</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        bool isPaid = item.Booking.Payment != null;

                        <tr class="border-b border-gray-700 transition hover:bg-gray-800/60 px-4 py-2">
                            <td class="px-4 py-2">@Html.DisplayFor(modelItem => item.Booking.BookingDate)</td>
                            <td class="px-4 py-2">@Html.DisplayFor(modelItem => item.Booking.NumberOfTickets)</td>
                            <td class="px-4 py-2">@item.Booking.TotalPrice.ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN")) ₫</td>
                            <td class="px-4 py-2">@Html.DisplayFor(modelItem => item.Booking.User.Email)</td>
                            <td class="px-4 py-2">@Html.DisplayFor(modelItem => item.Booking.CreatedAt)</td>
                            @{
                                if (isPaid)
                                {
                                    <td class="text-center px-4 py-2">
                                        <span class="rounded-full px-4 py-1 font-bold text-white shadow transition-all duration-200 bg-green-600 text-white-500 transition-all duration-150 hover:bg-green-700">Paid</span>
                                    </td>
                                }
                                else
                                {
                                    <td class="text-center px-4 py-2">
                                        <span class="rounded-full px-2 py-1 font-bold text-white shadow transition-all duration-200 bg-red-600 text-white-500 transition-all duration-150 hover:bg-red-700">Not Paid</span>
                                    </td>
                                }
                            }

                            <td class="px-4 py-2 text-center">
                                <a asp-action="BookingDetails" asp-route-bookingId="@item.Booking.Id" class="rounded-full bg-blue-600 px-4 py-1 font-bold text-white shadow transition-all duration-200 hover:bg-blue-700">Xem</a>
                            </td>
                            <td class="px-4 py-2 text-center">
                                @if (isPaid)
                                {
                                    if (item.MovieId.HasValue && item.MovieId.Value != Guid.Empty)
                                    {
                                        if (item.HasFeedback)
                                        {
                                            <button onclick="displayFeedback('@item.MovieId.Value')" class="rounded-full bg-gray-600 px-4 py-1 font-bold text-white shadow transition-all duration-200 hover:bg-gray-700">
                                                Xem Feedback
                                            </button>
                                        }
                                        else
                                        {
                                            <button onclick="showFeedbackForm('@item.MovieId.Value')" class="rounded-full bg-green-600 px-4 py-1 font-bold text-white shadow transition-all duration-200 hover:bg-green-700">
                                                Feedback
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-gray-500 text-xs">Không có phim</span>
                                    }
                                }
                                else
                                {
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Simple Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <div class="mt-6 flex items-center justify-center space-x-2">
                <!-- Previous Button -->
                @if (ViewBag.CurrentPage > 1)
                {
                    <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage - 1)" asp-route-pageSize="@ViewBag.PageSize"
                       class="px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">
                        <i class="fas fa-chevron-left mr-1"></i>Previous
                    </a>
                }
                else
                {
                    <span class="px-4 py-2 bg-gray-600 text-gray-400 rounded-lg cursor-not-allowed">
                        <i class="fas fa-chevron-left mr-1"></i>Previous
                    </span>
                }

                <!-- Page Numbers -->
                <div class="flex space-x-1">
                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        if (i == ViewBag.CurrentPage)
                        {
                            <span class="px-3 py-2 bg-red-600 text-white rounded-lg font-semibold">@i</span>
                        }
                        else
                        {
                            <a asp-action="Index" asp-route-page="@i" asp-route-pageSize="@ViewBag.PageSize"
                               class="px-3 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">@i</a>
                        }
                    }
                </div>

                <!-- Next Button -->
                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                {
                    <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage + 1)" asp-route-pageSize="@ViewBag.PageSize"
                       class="px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">
                        Next<i class="fas fa-chevron-right ml-1"></i>
                    </a>
                }
                else
                {
                    <span class="px-4 py-2 bg-gray-600 text-gray-400 rounded-lg cursor-not-allowed">
                        Next<i class="fas fa-chevron-right ml-1"></i>
                    </span>
                }
            </div>

            <!-- Page Info -->
            <div class="mt-4 text-center text-gray-400 text-sm">
                Showing @(((ViewBag.CurrentPage - 1) * ViewBag.PageSize) + 1) to @Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalItems) of @ViewBag.TotalItems bookings
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

                async function showFeedbackForm(movieId) {
            const { value: formValues } = await Swal.fire({
                title: 'Gửi Feedback của bạn',
                html:
                    '<div class="text-left space-y-4">' +
                    '<div>' +
                    '<label class="block text-gray-300 text-sm font-bold mb-2">Đánh giá:</label>' +
                    '<div id="swal-star-rating" class="flex space-x-1">' +
                    Array.from({ length: 5 }, (_, i) =>
                        `<i class="fa-star far text-yellow-400 text-2xl cursor-pointer" data-value="${i + 1}"></i>`
                    ).join('') +
                    '</div>' +
                    '</div>' +
                    '<div>' +
                    '<label for="swal-comment" class="block text-gray-300 text-sm font-bold mb-2">Bình luận:</label>' +
                    '<textarea id="swal-comment" rows="4" ' +
                    'class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white ' +
                    'focus:outline-none focus:ring-2 focus:ring-red-500 placeholder-gray-400" ' +
                    'placeholder="Viết bình luận của bạn về phim..."></textarea>' +
                    '</div>' +
                    '</div>',
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: 'Gửi Feedback',
                cancelButtonText: 'Hủy',
                background: '#1F2937',
                color: '#D1D5DB',
                confirmButtonColor: '#10B981',
                cancelButtonColor: '#EF4444',
                didOpen: () => {
                    const stars = Swal.getHtmlContainer().querySelectorAll('#swal-star-rating i');
                    stars.forEach(star => {
                        star.addEventListener('click', () => {
                            const value = parseInt(star.getAttribute('data-value'));
                            stars.forEach(s => {
                                s.classList.remove('fas');
                                s.classList.add('far');
                            });
                            for (let i = 0; i < value; i++) {
                                stars[i].classList.remove('far');
                                stars[i].classList.add('fas');
                            }
                            Swal.getHtmlContainer().setAttribute('data-rating', value);
                        });
                    });
                },
                preConfirm: () => {
                    const rating = parseInt(Swal.getHtmlContainer().getAttribute('data-rating') || '0');
                    const comment = document.getElementById('swal-comment').value;
                    if (!rating || rating < 1 || rating > 5) {
                        Swal.showValidationMessage('Bạn cần chọn số sao từ 1 đến 5.');
                        return false;
                    }
                    return { rating: rating, comment: comment };
                }
            });

            if (formValues) {
                Swal.fire({
                    title: 'Đang gửi feedback...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    background: '#1F2937',
                    color: '#D1D5DB'
                });

                try {
                    const response = await fetch('/Reviews/SubmitMovieFeedback', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            movieId: movieId,
                            rating: formValues.rating,
                            comment: formValues.comment
                        })
                    });

                    const data = await response.json();

                    if (response.ok && data.success) {
                        Swal.fire('Thành công!', data.message, 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        const errorMessage = data.message || (data.errors ? Object.values(data.errors).flat().map(e => e.errorMessage).join(', ') : 'Đã xảy ra lỗi khi gửi feedback.');
                        Swal.fire('Lỗi!', errorMessage, 'error');
                    }
                } catch (error) {
                    console.error('Error submitting feedback:', error);
                    Swal.fire('Lỗi!', 'Không thể kết nối đến máy chủ. Vui lòng thử lại.', 'error');
                }
            }
        }


        async function displayFeedback(movieId) {
            Swal.fire({
                title: 'Đang tải feedback...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                },
                background: '#1F2937',
                color: '#D1D5DB'
            });

            try {
                const response = await fetch(`/Reviews/GetUserMovieFeedback?movieId=${movieId}`);
                const data = await response.json();

                if (response.ok) {
                    Swal.fire({
                        title: 'Feedback của bạn',
                        html:
                            `<div class="text-left">
                                <p class="text-gray-300 mb-2"><strong>Đánh giá:</strong> ${data.rating} <i class="fas fa-star text-yellow-400"></i></p>
                                <p class="text-gray-300 mb-2"><strong>Bình luận:</strong> ${data.content || 'Không có bình luận.'}</p>
                                <p class="text-gray-400 text-sm">Gửi vào: ${new Date(data.createdAt).toLocaleString()}</p>
                                ${data.updatedAt ? `<p class="text-gray-400 text-sm">Chỉnh sửa lần cuối: ${new Date(data.updatedAt).toLocaleString()}</p>` : ''}
                            </div>
                            <div class="mt-4 text-center">
                                <button id="deleteFeedbackBtn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-colors duration-200">
                                    <i class="fas fa-trash-alt mr-2"></i>Xóa Feedback
                                </button>
                            </div>`,
                        icon: 'info',
                        confirmButtonText: 'Đóng',
                        background: '#1F2937',
                        color: '#D1D5DB',
                        confirmButtonColor: '#3085d6',
                        didRender: () => { // Sử dụng didRender để gắn sự kiện sau khi SweetAlert được render
                            document.getElementById('deleteFeedbackBtn').addEventListener('click', () => {
                                Swal.close(); // Đóng SweetAlert hiện tại
                                confirmDeleteFeedback(movieId);
                            });
                        }
                    });
                } else {
                    Swal.fire('Lỗi!', data.message || 'Không thể tải feedback. Vui lòng thử lại.', 'error');
                }
            } catch (error) {
                console.error('Error fetching feedback:', error);
                Swal.fire('Lỗi!', 'Không thể kết nối đến máy chủ. Vui lòng thử lại.', 'error');
            }
        }

        async function confirmDeleteFeedback(movieId) {
            const result = await Swal.fire({
                title: 'Bạn có chắc chắn muốn xóa feedback này?',
                text: "Hành động này không thể hoàn tác!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Có, xóa nó!',
                cancelButtonText: 'Hủy bỏ',
                background: '#1F2937',
                color: '#D1D5DB'
            });

            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Đang xóa feedback...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    background: '#1F2937',
                    color: '#D1D5DB'
                });

                try {
                    const response = await fetch('/Reviews/DeleteMovieFeedback', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify({ movieId: movieId })
                    });

                    const data = await response.json();

                    if (response.ok && data.success) {
                        Swal.fire('Đã xóa!', data.message, 'success').then(() => {
                            location.reload(); // Tải lại trang để cập nhật trạng thái nút feedback
                        });
                    } else {
                        const errorMessage = data.message || 'Đã xảy ra lỗi khi xóa feedback.';
                        Swal.fire('Lỗi!', errorMessage, 'error');
                    }
                } catch (error) {
                    console.error('Error deleting feedback:', error);
                    Swal.fire('Lỗi!', 'Không thể kết nối đến máy chủ. Vui lòng thử lại.', 'error');
                }
            }
        }
    </script>
}

